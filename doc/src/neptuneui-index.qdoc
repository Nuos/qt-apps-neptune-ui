/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Automotive Suite.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
   \page neptuneui-index.html
   \title Neptune UI
   \brief A best practice HMI for the OEMs to test the Qt Automotive Suite.

   Neptune provides HMI IVI (infotainment) system. It is a reference
   of best practices in HMI for the OEMs to test and develop with the
   \l {https://www.qt.io/qt-automotive-suite/} {Qt Automotive Suite}.
    Neptune depends on
   \l {https://doc.qt.io/QtApplicationManager/} {Qt Application Manager}
   for the necessary infrastructure. It comes with
   support for a Head Unit and Cluster. The system also provides the
   infrastructure to develop, maintain, and deploy applications.

   \section1 Quick links

   \list
   \li \l {How to run Neptune} {How to build and run Neptune}
   \li \l {Neptune Application Development} {Neptune Application Development}
   \endlist

   \section1 Story

   \list
   \li Design for Neptune is done and delivered by UX company.
   \li Implementation done using Qt/QML and based on
   \l {https://doc.qt.io/QtApplicationManager/}
   {Qt Application Manager}, which provides application and window
   management.
   \li Possible to integrate various car 3D model technologies.
   \li Possible to integrate various navigation solutions.
   \li Uses \l {https://www.qt.io/qt-automotive-suite/} {QtIVI} module,
   which provides C++ classes and QML types for accessing vehicle
   features, as well as a core API for implementing new IVI features.
   \endlist

   \section2 Idea

   \list
   \li Best practices how automotive UI should be developed using
   \l {https://www.qt.io/qt-automotive-suite/} {Qt Automotive Suite}.
   \li Designers and developers working together.
   \li Designers have the control on how the UI will look like in the end.
   \li Flexibility, allows integration of external tools (3D tools, maps, QtIVI).
   \li Multi-process UI, base for the system.
   \endlist

   \section2 Structure

   In order to support multi-process architecture, Neptune is structured
   as presented below.
   \list
   \li System UI (\c sysui) - climate panel, car overview, home page, etc.
   \li Applications (\c apps) - container for the different applications
   used within the system UI.
   \li Imports/Modules (\c assets, \c controls, \c utils, \c models, etc)
   - modules, assets and controls required for visual appearance and
   functionalities both for system UI and application.
   \li Plugins - QML plugins required for communication with low level services.
   \li Styles - style and UI configurations.
   \endlist

   \section2 Key concepts

   In this section, Neptune interaction and visual concept will be presented.

   \borderedimage neptune-ui-structure.png
   \caption Neptune interaction flow

   \borderedimage instrument-cluster.png
   \caption QtQuick-based digital instrument cluster

   \borderedimage infotainment-cluster.png
   \caption QtQuick-based Head Unit

   The Head Unit interface provides additional pages that are accessible
   by swiping from right-to-left or left-to-right:

   \borderedimage infotainment-cluster-apps.png
   \caption Available applications on the Head Unit

   \borderedimage infotainment-cluster-settings.png
   \caption \uicontrol Settings that provides more control on the HEAD Unit and
   Cluster. The \uicontrol{APP STORE} tab in the \uicontrol Settings page lets
   you install/uninstall applications from the Head Unit.

   \borderedimage infotainment-cluster-carsettings.png
   \caption Provides options to enable or disable features on the car.

   \borderedimage infotainment-cluster-mycar.png
   \caption Provides an overview about the car itself.

   \section1 Common Terms Used In The Project

   Common terms and their meaning is enumerated below:

   \list
    \li Display - The physical display's real estate
    \li Screen - A Screen is a part of the main navigation. For example the HomeScreen, CloudScreen and MusicScreen
    \li Control(s) - Controls are elements such as Button, Icon, Label and other
    primitives
    \li Dummyimports - Simple QML implementation used to start the UI without
    backend, C++ implementation. It simulates the behavior of real backend.
   \endlist

*/

/*!
    \externalpage http://doc.qt.io/QtForDeviceCreation/qtee-custom-embedded-linux-image.html
    \title Building eLinux Image
*/
/*!
    \externalpage http://code.qt.io/cgit/qt/qtapplicationmanager.git/
    \title Qt Application Manager Git Repository
*/
/*!
    \externalpage http://code.qt.io/cgit/qt-apps/neptune-ui.git/
    \title Neptune-UI Git Repository
*/
